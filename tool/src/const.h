static const char *buildh =
    "#include <stdio.h>\n"
    "#include <stdlib.h>\n"
    "#include <string.h>\n"
    "#include <stddef.h>\n\n"

    "#define start int main() { char objsrc[1024 * 10] = {0}; system(\"clear\"); printf(\"SULEKO BUILD SYSTEM.\\nBUILDING %s.\\n\\n\", binname);\n"
    "#define end printf(\"DONE.\\n\"); return 0; }\n\n"

    "#define $cc(path) const char *cc_path = path;\n"
    "#define $as(path) const char *as_path = path;\n"
    "#define $ld(path) const char *ld_path = path;\n\n"

    "#define $csrc(...) const char *csrc[] = { __VA_ARGS__ };\n"
    "#define $assrc(...) const char *assrc[] = { __VA_ARGS__ };\n\n"

    "#define $outdir(path) const char *outdir = path;\n"
    "#define $bindir(name) const char *bindir = name;\n"
    "#define $bin(name) const char *binname = name;\n\n"

    "#define mkdirs { \\\n"
    "  char cmd[256] = {0}; \\\n"
    "  snprintf(cmd, sizeof(cmd), \"mkdir -p %s %s\", outdir, bindir); \\\n"
    "  printf(\"- EXECUTING: %s\\n\", cmd); \\\n"
    "  system(cmd); \\\n"
    "}\n\n"

    "#define ccompile { \\\n"
    "  printf(\"\\n-----C COMPILATION STARTED-----\\n\"); \\\n"
    "  for (int i = (int)(sizeof(csrc) / sizeof(csrc[0])) - 1; i >= 0; i--) { \\\n"
    "    char cmd[256] = {0}; \\\n"
    "    char objname[128] = {0}; \\\n"
    "    const char *filename = strrchr(csrc[i], '/'); \\\n"
    "    filename = filename ? filename + 1 : csrc[i]; \\\n"
    "    strncpy(objname, filename, sizeof(objname) - 1); \\\n"
    "    char *dot = strrchr(objname, '.'); \\\n"
    "    if (dot) *dot = '\\0'; \\\n"
    "    snprintf(objname + strlen(objname), sizeof(objname) - strlen(objname), \".o\"); \\\n"
    "    snprintf(cmd, sizeof(cmd), \"%s -c %s -o %s/%s\", cc_path, csrc[i], outdir, objname); \\\n"
    "    printf(\"EXECUTING: %s\\n\", cmd); \\\n"
    "    system(cmd); \\\n"
    "    strcat(objsrc, outdir); \\\n"
    "    strcat(objsrc, \"/\"); \\\n"
    "    strcat(objsrc, objname); \\\n"
    "    strcat(objsrc, \" \"); \\\n"
    "  } \\\n"
    "  printf(\"-----C COMPILATION FINISHED-----\\n\\n\"); \\\n"
    "}\n\n"

    "#define ascompile { \\\n"
    "  printf(\"\\n-----ASM COMPILATION STARTED-----\\n\"); \\\n"
    "  for (int i = (int)(sizeof(assrc) / sizeof(assrc[0])) - 1; i >= 0; i--) { \\\n"
    "    char cmd[256] = {0}; \\\n"
    "    char objname[128] = {0}; \\\n"
    "    const char *filename = strrchr(assrc[i], '/'); \\\n"
    "    filename = filename ? filename + 1 : assrc[i]; \\\n"
    "    strncpy(objname, filename, sizeof(objname) - 1); \\\n"
    "    char *dot = strrchr(objname, '.'); \\\n"
    "    if (dot) *dot = '\\0'; \\\n"
    "    snprintf(objname + strlen(objname), sizeof(objname) - strlen(objname), \".o\"); \\\n"
    "    snprintf(cmd, sizeof(cmd), \"%s -c %s -o %s/%s\", as_path, assrc[i], outdir, objname); \\\n"
    "    printf(\"EXECUTING: %s\\n\", cmd); \\\n"
    "    system(cmd); \\\n"
    "    strcat(objsrc, outdir); \\\n"
    "    strcat(objsrc, \"/\"); \\\n"
    "    strcat(objsrc, objname); \\\n"
    "    strcat(objsrc, \" \"); \\\n"
    "  } \\\n"
    "  printf(\"-----ASM COMPILATION FINISHED-----\\n\\n\"); \\\n"
    "}\n\n"

    "#define link { \\\n"
    "  printf(\"\\n-----LINKING STARTED-----\\n\"); \\\n"
    "  char cmd[1024 * 10] = {0}; \\\n"
    "  snprintf(cmd, sizeof(cmd), \"%s %s -o %s/%s\", ld_path, objsrc, bindir, binname); \\\n"
    "  printf(\"EXECUTING: %s\\n\", cmd); \\\n"
    "  system(cmd); \\\n"
    "  printf(\"-----LINKING FINISHED-----\\n\\n\"); \\\n"
    "}\n\n"

    "#define install { \\\n"
    "  printf(\"\\n-----INSTALLING STARTED-----\\n\"); \\\n"
    "  char cmd[256] = {0}; \\\n"
    "  snprintf(cmd, sizeof(cmd), \"mkdir -p ~/.local/bin/\"); \\\n"
    "  printf(\"EXECUTING: %s\\n\", cmd); \\\n"
    "  system(cmd); \\\n"
    "  snprintf(cmd, sizeof(cmd), \"rm ~/.local/bin/%s\", binname); \\\n"
    "  printf(\"EXECUTING: %s\\n\", cmd); \\\n"
    "  system(cmd); \\\n"
    "  snprintf(cmd, sizeof(cmd), \"cp %s/%s ~/.local/bin/\", bindir, binname); \\\n"
    "  printf(\"EXECUTING: %s\\n\", cmd); \\\n"
    "  system(cmd); \\\n"
    "  printf(\"-----INSTALLING FINISHED-----\\n\\n\"); \\\n"
    "}\n\n"

    "#define clean { \\\n"
    "  char cmd[1024 * 10] = {0}; \\\n"
    "  snprintf(cmd, sizeof(cmd), \"rm -rf %s %s\", outdir, bindir); \\\n"
    "  printf(\"- EXECUTING: %s\\n\", cmd); \\\n"
    "  system(cmd); \\\n"
    "}\n\n"

    "#define run { \\\n"
    "  char cmd[256] = {0}; \\\n"
    "  snprintf(cmd, sizeof(cmd), \"%s/%s\", bindir, binname); \\\n"
    "  printf(\"- EXECUTING: %s\\n\", cmd); \\\n"
    "  system(cmd); \\\n"
    "}\n\n"

    "#define exec(cmd) { \\\n"
    "  printf(\"- EXECUTING: %s\\n\", cmd); \\\n"
    "  system(cmd); \\\n"
    "}\n";


static const char *buildc =
    "#include \"header/build.h\"\n\n"
    "// Set C compiler and its flags\n"
    "$cc(\"gcc -Wall -Wextra -O2 -std=c17 -ffreestanding -fno-pie -fno-stack-protector\")\n\n"
    
    "// Set assembler and its flags\n"
    "$as(\"nasm -f elf64\")\n\n"
    
    "// Set linker and its flags\n"
    "$ld(\"ld -nostdlib -static -z noexecstack\")\n\n"
    
    "// Set the output binary path and name\n"
    "$bindir(\"bin\")\n"
    "$bin(\"bestos\")\n\n"
    
    "// Add C source files\n"
    "$csrc(\"src/file0.c\", \"src/file1.c\")\n\n"
    
    "// Add Assembly source files\n"
    "$assrc(\"src/file2.s\", \"src/file3.s\")\n\n"
    
    "// Set output directory for object files\n"
    "$outdir(\"out\")\n\n"
    
    "start\n"
    "  clean        // Delete $outdir and $bindir\n"
    "  mkdirs       // Create $outdir and $bindir\n"
    "  ccompile     // Compile C source files into .o files\n"
    "  ascompile    // Assemble .s files into .o files\n"
    "  link         // Link all object files into final binary\n"
    "  install      // Install(~/.local/bin) and add to $PATH final binary\n"
    "  run          // Run the resulting binary\n"
    "  exec(\"cmd\")  // Executing a command\n"
    "end\n";

